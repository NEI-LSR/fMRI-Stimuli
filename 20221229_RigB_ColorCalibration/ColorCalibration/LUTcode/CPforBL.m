function [bsuccess] = CPforBL(mx)% ColourPatch.mglobal windowPTR gray% A simple demonstration of the use of the PsychToolBox Screen(...)% functions to draw stimuli to a Bits++.%% Draws a square and changes the colour: Red>Green>Blue>Black>White.%% Written by Stephen Howell, September 2006%% Initialise%clear all; close all% Enumerate the screens connected to the computer's graphics card and% choose the one with the highest index. If you have two screen connected% the Screen('Screens') functions will return [1,2]. So, unless you alter% this line, you must ensure that screen 2 is the Bits++/stimulus screen.% If you have two screens but you want to connect the screen 1 output from% your graphics card to the Bits++ then you should say whichScreen = 1.% Open the chosen screen.% For an explanation of the parameters, type Screen OpenwindowPTR? at the MatLab prompt.% This loads a simple linear ramp into the graphics card's gamma LUT.% It is done to ensure that data sent to the Bits++ is not altered at all % by the card. If this happened the T-Lock code would be broken and the% Bits++ CLUT would not be set.% The commented out line is relevant to Mac. It loads the gamma table as a% series of values from 0 to 255/256. This was necessary because of an% indexing anomoly in the underlieing OpenGL code used by PTB. The PC% version uses the more normal 0 to 1 range. If you have problems getting% the Bits++ to recognise the T-Lock code, try swapping these lines.%Screen('LoadNormalizedGammaTable',windowPTR,linspace(0,(255/256),256)'*ones(1,3));Screen('LoadNormalizedGammaTable',windowPTR,linspace(0,1,256)'*ones(1,3));Clut = ones( 256, 3 );for i = 1:255    Clut(i,:) = gray;endClut( 2, : ) = mx;[screenWidth, screenHeight]=Screen('windowSize', windowPTR);size = min([screenWidth screenHeight]);squaresize = size / 6;xpos = screenWidth/2; ypos = screenHeight/2;Screen('FillRect', windowPTR, 0 );Screen('FillOval', windowPTR, [1 1 1], [ xpos-squaresize/2 ypos-squaresize/2 xpos+squaresize/2 ypos+squaresize/2 ] );disp(['Reading #' num2str(1) ': ' num2str(mx(1,:))]);ClutEncoded = BitsPlusEncodeClutRow( Clut );ClutTextureIndex = Screen( 'MakeTexture', windowPTR, ClutEncoded );Screen( 'DrawTexture', windowPTR, ClutTextureIndex, [], [0, 0, 524, 1] );Screen( windowPTR, 'Flip', 0, 1 );bsuccess = 1;